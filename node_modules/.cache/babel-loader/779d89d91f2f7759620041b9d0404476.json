{"ast":null,"code":"var _jsxFileName = \"/home/viggy/Desktop/insta_clone/insta_clone/src/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from '@material-ui/core';\nimport { db, storage } from './firebase';\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [caption, setCaption] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [image, setImage] = useState(null);\n\n  const handleChange = e => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref('images/${image.name}').put(image);\n    uploadTask.on(\"state_changed\", snapshot => {\n      //Progress function\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      setProgress(progress);\n    }, error => {\n      //error function\n      console.log(error);\n      alert(error.message);\n    }, () => {\n      storage.ref(\"images\").child(image.name).getDownloadURL().then(url => {\n        // Post image URL inside db\n        db.collection(\"posts\").add({\n          // timestamp is used here to figure out the time the image was uploaded, which is gonna determine the order in which we display the posts (latest at the top)\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username,\n          imagename: image.name\n        }); // Reset everything once upload process is completed\n\n        setProgress(0);\n        setCaption(\"\");\n        setImage(null); //closemodal(false);\n        // Scroll back to top and reset other states so that it goes back to default list\n\n        document.body.scrollTop = 0; // For Safari\n\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n        //viewwhichuser('');\n        // viewsinglepost(false);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a caption\",\n      onChange: event => setCaption(event.target.value),\n      value: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"QKykxGhggwBdiRYyb2/oVH1Pur8=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/viggy/Desktop/insta_clone/insta_clone/src/ImageUpload.js"],"names":["React","useState","Button","db","storage","firebase","ImageUpload","username","caption","setCaption","progress","setProgress","image","setImage","handleChange","e","target","files","handleUpload","uploadTask","ref","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","name","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","imagename","document","body","scrollTop","documentElement","event","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from '@material-ui/core'\nimport { db, storage } from './firebase';\nimport firebase from \"firebase\";\n\n\nfunction ImageUpload({ username }) {\n\n    const [caption, setCaption] = useState('');\n    const [progress, setProgress] = useState(0);\n    const [image, setImage] = useState(null);\n\n    const handleChange = (e) => {\n        if (e.target.files[0]) {\n            setImage(e.target.files[0]);\n        }\n    }\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref('images/${image.name}').put(image);\n\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                //Progress function\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                //error function\n                console.log(error);\n                alert(error.message);\n            },\n            () => {\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // Post image URL inside db\n                        db.collection(\"posts\").add({\n                            // timestamp is used here to figure out the time the image was uploaded, which is gonna determine the order in which we display the posts (latest at the top)\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username,\n                            imagename: image.name\n                        });\n\n                        // Reset everything once upload process is completed\n                        setProgress(0);\n                        setCaption(\"\");\n                        setImage(null);\n                        //closemodal(false);\n\n                        // Scroll back to top and reset other states so that it goes back to default list\n                        document.body.scrollTop = 0; // For Safari\n                        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n                        //viewwhichuser('');\n                        // viewsinglepost(false);\n                    })\n            }\n        )\n    }\n\n\n    return (\n        <div>\n            {/* I want to have a */}\n            {/* caption input */}\n            {/* file picker */}\n            {/* Post button */}\n            <progress value={progress} max=\"100\" />\n            <input type=\"text\" placeholder=\"Enter a caption\" onChange={event => setCaption(event.target.value)} value={caption} />\n            <input type=\"file\" onChange={handleChange} />\n            <Button onClick={handleUpload} >Upload</Button>\n        </div>\n    )\n}\n\nexport default ImageUpload\n"]},"metadata":{},"sourceType":"module"}